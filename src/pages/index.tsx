import Head from "next/head";
import type { GetServerSideProps } from "next";

import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { useTranslation } from "next-i18next";

import Card from "src/components/Card";
import Layout from "src/components/Layout";
import Sidebar from "src/components/Sidebar";
import { fetchPageFolders } from "src/api/fetchPageFolders";

import { changePostsData } from "helpers/changePostsData";

import { Posts } from "types/postTypes";
import { PageFolders } from "types/pageFoldersTypes";
interface Props {
  pageFolders: PageFolders[];
  posts: {
    posts: [] | Posts[];
    total: number;
  };
  sidebarCategories: any;
}

const Home = ({ pageFolders, posts, sidebarCategories }: Props) => {
  const { t } = useTranslation();
  const postsData: Posts[] = posts.posts;

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout
        SidebarComponent={<Sidebar sidebarCategories={sidebarCategories} />}
        pageFolders={pageFolders}
      >
        {postsData.map(({ title, categories, image, id }, index) => (
          <div key={index} style={{ width: 450, margin: "0 20px 20px 0" }}>
            <Card title={title} categories={categories} image={image} id={id} />
          </div>
        ))}
      </Layout>
    </div>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async ({ locale }) => {
  let posts = {};
  let sidebarCategories = [];
  let pageFolders: PageFolders[] = [];

  try {
    const responsePosts = await fetch(
      "https://api.jidipi.com/api/v1/post/public/603ce60958c5c6279bc2ed96?pageNumber=0&pageSize=100&language=EN"
    );
    const responseSidebarCategories = await fetch(
      "https://api.jidipi.com/api/v1/category?pageFolderId=603ce60958c5c6279bc2ed96"
    );

    const postsFromApi = await responsePosts.json();
    const sidebarCategoriesFromApi = await responseSidebarCategories.json();

    posts = {
      ...postsFromApi,
      posts: changePostsData(postsFromApi.posts),
    };
    sidebarCategories = sidebarCategoriesFromApi;

    pageFolders = await fetchPageFolders();
  } catch (e) {
    console.log(e);
  }

  return {
    props: {
      ...(await serverSideTranslations(locale as string, ["common"])),
      posts,
      sidebarCategories,
      pageFolders,
    },
  };
};
