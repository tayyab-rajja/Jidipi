import Head from "next/head";
import { FC } from "react";
import { GetServerSideProps } from "next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";

import Layout from "src/components/Layout";

import UserPanelData from "src/components/UserPanelData/UserPanelData";
import PanelTable from "src/components/PanelTable/PanelTable";
import SidebarWithAvatar from "src/components/SidebarWithAvatar/SidebarWithAvatar";

import { fetchPageFolders } from "src/api/fetchPageFolders";
import { useFavoratePosts } from "src/api/useFavoratePosts";

import { getTableData } from "helpers/getTableData";
import { PageFolder } from "types/pageFolderType";

interface TablePageProps {
  tabs: PageFolder[];
  pageType: "post" | "company" | "information";
}

const getTabs = (type: string, pageFolders: PageFolder[]) => {
  switch (type) {
    case "post":
      return pageFolders.filter(
        ({ pageType }) => pageType === "PRODUCT" || pageType === "PROJECT"
      );
    case "company":
      return [{ title: "all", _id: "" }];
    case "information":
      return pageFolders.filter(({ pageType }) => pageType === "INFORMATION");
    default:
      return [];
  }
};

const TablePage: FC<TablePageProps> = ({ tabs, pageType }) => {
  const { data, params, setParams, deleteFavorite } = useFavoratePosts(
    tabs[0]._id
  );
  const { tableColumns, tableData } = getTableData(data?.readerPost, pageType);

  return (
    <div>
      <Head>
        <title>JIDIPI - Panel</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout sidebarComponent={<SidebarWithAvatar />}>
        <div
          style={{
            maxWidth: "1200px",
            minWidth: "840px",
            margin: "-20px auto 0 auto",
          }}
        >
          <UserPanelData />
          <PanelTable
            deleteFavorite={deleteFavorite}
            params={params}
            setParams={(param) =>
              setParams((prev) => ({
                ...prev,
                ...param,
              }))
            }
            total={data?.total}
            tabs={tabs}
            tableColumns={tableColumns}
            tableData={tableData}
          />
        </div>
      </Layout>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({
  locale,
  query: { panel },
}) => {
  let pageFolders: PageFolder[] = [];
  let tabs = [];
  //@ts-ignore
  const pageType = panel[0];

  try {
    pageFolders = await fetchPageFolders();
  } catch (e) {
    console.log(e);
  }

  tabs = getTabs(pageType, pageFolders);

  return {
    props: {
      ...(await serverSideTranslations(locale as string, ["common"])),
      tabs,
      pageType,
    },
  };
};

export default TablePage;
