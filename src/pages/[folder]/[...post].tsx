import React, { useState } from "react";
import Head from "next/head";
import Script from "next/script";
import { GetServerSideProps } from "next/types";

import Layout from "src/components/Layout";
import CardDetails from "src/components/CardDetails/CardDetails";
import CompanyProfile from "src/components/CompanyProfile/CompanyProfile";
import Sidebar from "src/components/Sidebar";

import { fetchPageFolders } from "src/api/fetchPageFolders";
import { fetchPost } from "src/api/fetchPost";
import { fetchCategoriesList } from "src/api/fetchCategoriesList";

import { getPostCategories } from "helpers/changePostsData";

import { PageFolder } from "types/pageFolderType";
import { SideBarProvider } from "src/providers/SidebarProvider/SidebarProvider";
import SaveInFolderSidebar from "src/components/SaveInFolderSidebar";

type Props = {
  post: any;
  pageFolders: PageFolder[];
  sidebarCategories: any;
  currentPageFolder: PageFolder;
};

const Post = ({ post, sidebarCategories, pageFolders, currentPageFolder }: Props) => {
  const categories = getPostCategories(post, "oldCategories");
  const companyImg = post?.companyId?.avatar || null;
  const title = post.title;

  const [showSaveBar, setShowSaveBar] = useState(false);
  const handleOpen = () => {
    setShowSaveBar(true);
  }
  
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout
        pageFolders={pageFolders}
        SidebarComponent={<Sidebar sidebarCategories={sidebarCategories} />}
      >
        <CardDetails
          categories={categories}
          companyImg={companyImg}
          title={title}
          handleOpen={handleOpen}
        >
          <div dangerouslySetInnerHTML={{ __html: post.description }} />
        </CardDetails>
        {companyImg && <CompanyProfile companyImg={companyImg} />}
      </Layout>
      <SideBarProvider
        isOpen={showSaveBar}
        close={() => setShowSaveBar(false)}
      >
        <SaveInFolderSidebar pageFolders={pageFolders} currentPageFolder='architectures' postId={post.postId} />
      </SideBarProvider>
      <Script src={process.env.NEXT_PUBLIC_SETKA_SCRIPTS_URL}></Script>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  let post = {};
  let sidebarCategories = [];
  let pageFolders: PageFolder[] = [];
  //@ts-ignore
  const postId = query?.post[0];
  const folder = query?.folder;

  try {
    pageFolders = await fetchPageFolders();
  } catch (e) {
    console.log(e);
  }

  const currentPageFolder = pageFolders.find(
    (pageFolder) => pageFolder.subDomain === folder
  );

  try {
    const sidebarCategoriesFromApi = await fetchCategoriesList(
      currentPageFolder?._id
    );

    const postFromApi = await fetchPost(postId);

    post = postFromApi;
    sidebarCategories = sidebarCategoriesFromApi;
  } catch (e) {
    console.log(e);
  }

  return {
    props: {
      notFound: !currentPageFolder,
      post,
      sidebarCategories,
      pageFolders,
      currentPageFolder,
      postId
    },
  };
};

export default Post;
