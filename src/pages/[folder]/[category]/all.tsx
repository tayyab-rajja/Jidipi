import { GetServerSideProps } from "next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { ReactElement } from "react";

import { fetchPageFolders } from "src/api/fetchPageFolders";
import { usePageFolderByName } from "src/api/usePageFolderByName";
import { Alphabet } from "src/components/Alphabet/Alphabet";
import { useCategories } from "src/components/Categories/useCategories";
import { CompanyCategory } from "src/components/CompanyCategory/CompanyCategory";

import Layout from "src/components/Layout";
import Sidebar from "src/components/Sidebar";
import { ICategoriesResponse } from "types/categoryTypes";

import { PageFolder } from "types/pageFolderType";

const getCategoty = (
  categories: ICategoriesResponse | undefined,
  categoryType: string
) => {
  if (!categories) {
    return [];
  }

  switch (categoryType) {
    case "brand":
    case "architect":
      return categories.companies;
    case "category":
      return categories.categories.find(({ type }) => type === "CATEGORIES")
        ?.categories;
    default:
      return categories.categories.find(
        ({ type }) => type === categoryType.toLocaleUpperCase()
      )?.categories;
  }
};

interface Props {}

const FolderPage = ({}: Props) => {
  const { query } = useRouter();
  const { data: pageFolder } = usePageFolderByName(
    (query.folder as string) ?? null
  );
  const { categories } = useCategories((pageFolder?._id as string) ?? null);

  const category = getCategoty(categories, query.category as string);

  const isCompanies =
    query.category === "brand" || query.category === "architect";

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div style={{ display: "flex", flexDirection: "column", height: "100%" }}>
        <Alphabet />
        <CompanyCategory />
      </div>
    </>
  );
};

FolderPage.getLayout = function getLayout(page: ReactElement) {
  return <Layout sidebarComponent={<Sidebar />}>{page}</Layout>;
};

export default FolderPage;

export const getServerSideProps: GetServerSideProps = async ({
  params,
  locale,
}) => {
  let pageFolders: PageFolder[] = [];

  try {
    pageFolders = await fetchPageFolders();
  } catch (e) {
    console.log(e);
  }

  const currentPageFolder = pageFolders.find(
    (pageFolder) => pageFolder.subDomain === params?.folder
  );

  return {
    notFound: !currentPageFolder,
    props: {
      ...(await serverSideTranslations(locale as string, ["common"])),
    },
  };
};
