import { changePostsData } from "helpers/changePostsData";
import { GetServerSideProps } from "next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import React from "react";
import { fetchPageFolders } from "src/api/fetchPageFolders";
import Card from "src/components/Card";
import Layout from "src/components/Layout";
import Sidebar from "src/components/Sidebar";
import { PageFolders } from "types/pageFoldersTypes";
import { Post } from "types/postTypes";
import { fetchPosts } from "src/api/fetchPosts";
import qs from "qs";
import { fetchCategoriesList } from "src/api/fetchCategoriesList";

interface Props {
  pageFolders: PageFolders[];
  posts: {
    posts: [] | Post[];
    total: number;
  };
  sidebarCategories: any;
}

const FolderPage = ({ pageFolders, posts, sidebarCategories }: Props) => {
  const postsData: Post[] = posts?.posts ?? [];
  const { query } = useRouter();

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout
        SidebarComponent={<Sidebar sidebarCategories={sidebarCategories} />}
        pageFolders={pageFolders}
      >
        {postsData.map(({ title, categories, image, id, slug }) => (
          <div key={id} style={{ width: 450, margin: "0 20px 20px 0" }}>
            <Card
              id={id}
              folder={query.folder as string}
              slug={slug}
              title={title}
              categories={categories}
              image={image}
            />
          </div>
        ))}
      </Layout>
    </div>
  );
};

export default FolderPage;

export const getServerSideProps: GetServerSideProps = async ({
  params,
  locale,
  query,
}) => {
  let pageFolders: PageFolders[] = [];
  let posts = {};
  let sidebarCategories = [];

  try {
    pageFolders = await fetchPageFolders();
  } catch (e) {
    console.log(e);
  }

  const currentPageFolder = pageFolders.find(
    (pageFolder) => pageFolder.subDomain === params?.folder
  );

  const responseSidebarCategories = await fetchCategoriesList(
    currentPageFolder?._id
  );

  const postsFromApi = await fetchPosts(
    currentPageFolder?._id,
    qs.stringify(query)
  );

  posts = {
    posts: changePostsData(postsFromApi.posts),
  };
  sidebarCategories = responseSidebarCategories;

  return {
    notFound: !currentPageFolder,
    props: {
      ...(await serverSideTranslations(locale as string, ["common"])),
      posts,
      sidebarCategories,
      pageFolders,
    },
  };
};
