import { changePostsData } from "helpers/changePostsData";
import { GetServerSideProps } from "next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import React from "react";
import { fetchPageFolders, PageFolders } from "src/api/fetchPageFolders";
import Card from "src/components/Card";
import Layout from "src/components/Layout";
import Sidebar from "src/components/Sidebar";
import { Posts } from "types/postTypes";

interface Props {
  pageFolders: PageFolders[];
  posts: {
    posts: [] | Posts[];
    total: number;
  };
  sidebarCategories: any;
}

const FolderPage = ({ pageFolders, posts, sidebarCategories }: Props) => {
  const postsData: Posts[] = posts?.posts ?? [];
  const { query } = useRouter();

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout
        SidebarComponent={<Sidebar sidebarCategories={sidebarCategories} />}
        pageFolders={pageFolders}
      >
        {postsData.map(({ title, categories, image, id, slug }) => (
          <div key={id} style={{ width: 450, margin: "0 20px 20px 0" }}>
            <Link href={`${query.folder}/${id}/${slug}`}>
              <a>
                <Card
                  title={title}
                  categories={categories}
                  image={image}
                  id={id}
                />
              </a>
            </Link>
          </div>
        ))}
      </Layout>
    </div>
  );
};

export default FolderPage;

export const getServerSideProps: GetServerSideProps = async ({
  params,
  locale,
}) => {
  let pageFolders: PageFolders[] = [];
  let posts = {};
  let sidebarCategories = [];

  try {
    pageFolders = await fetchPageFolders();
  } catch (e) {
    console.log(e);
  }

  const currentPageFolder = pageFolders.find(
    (pageFolder) => pageFolder.subDomain === params?.folder
  );

  try {
    const responsePosts = await fetch(
      `${process.env.NEXT_PUBLIC_API_URL}/post/public/${currentPageFolder?._id}?pageNumber=0&pageSize=100&language=EN`
    );
    const responseSidebarCategories = await fetch(
      `${process.env.NEXT_PUBLIC_API_URL}/category?pageFolderId=${currentPageFolder?._id}`
    );

    const postsFromApi = await responsePosts.json();
    const sidebarCategoriesFromApi = await responseSidebarCategories.json();

    posts = {
      posts: changePostsData(postsFromApi.posts),
    };
    sidebarCategories = sidebarCategoriesFromApi;
  } catch (e) {
    console.log(e);
  }

  return {
    notFound: !currentPageFolder,
    props: {
      ...(await serverSideTranslations(locale as string, ["common"])),
      posts,
      sidebarCategories,
      pageFolders,
    },
  };
};
